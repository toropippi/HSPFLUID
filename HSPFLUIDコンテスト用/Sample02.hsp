//流体計算
//壁ありバージョン
#include "HSPFLUID64.as"
	buffer 1:picload "back02.png"

	wx = 10
	wy = 10
	scale = 40
	
	ddim vx,wx,wy//x速度
	ddim vy,wx,wy//y速度
	ddim p,wx,wy//圧力
	dim wall,wx,wy//そこが壁かどうか
	
	wall.6.5=1//1は壁という意味
	wall.6.6=1//1は壁という意味
	wall.7.5=1//1は壁という意味
	wall.7.6=1//1は壁という意味

	pnum = 500//粒子の数
	ddim particle_x,pnum//粒子の座標
	ddim particle_y,pnum//粒子の座標
	ddim speed_x,pnum//粒子の速度
	ddim speed_y,pnum//粒子の速度
	
	screen 0,wx*scale,wy*scale
	timer = 0

*main
	pos 0,0
	gmode 3,0,0,30
	gcopy 1,0,0,wx*scale,wy*scale

	vx.2.4 = cos(0.02*timer+1.57)*0.4//速度つける
	vx.2.5 = cos(0.02*timer+1.57)*0.4//速度つける
	vx.2.6 = cos(0.02*timer+1.57)*0.4//速度つける
	
	FluidProcess vx,vy,p,wall//流体計算
	GetSpeedPoints vx,vy,particle_x,particle_y,speed_x,speed_y//粒子の速度計算

	color 0,0,0
	gosub*Particle_set
		repeat pnum
		particle_x.cnt+=speed_x.cnt
		particle_y.cnt+=speed_y.cnt
		if (particle_x.cnt<0):particle_x.cnt+=wx
		if (particle_y.cnt<0):particle_y.cnt+=wy
		if (particle_x.cnt>1.0*wx):particle_x.cnt-=wx
		if (particle_y.cnt>1.0*wy):particle_y.cnt-=wy
		pset particle_x.cnt*scale,particle_y.cnt*scale
		loop
	redraw 1
	redraw 0
	await 16
	timer++
	goto*main


*Particle_set//順繰りに初期化
		repeat 4
		index=(index+1)\pnum
		particle_x.index=0.0001*rnd(20000)+1.0
		particle_y.index=0.0001*rnd(20000)*wy
		loop
	return